# üìå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–æ–º –∑–∞–¥–∞—á. –ö–∞–∂–¥–∞—è –∑–∞–¥–∞—á–∞ –¥–æ–ª–∂–Ω–∞
# —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ. –î–ª—è –∫–∞–∂–¥–æ–π –∑–∞–¥–∞—á–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å
# —É–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å (–≤—ã–ø–æ–ª–Ω–µ–Ω–∞/–Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞).
# üìå API –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–Ω–µ—á–Ω—ã–µ —Ç–æ—á–∫–∏:
# ‚óã GET /tasks - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–¥–∞—á.
# ‚óã GET /tasks/{id} - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–¥–∞—á—É —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º.
# ‚óã POST /tasks - –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É.
# ‚óã PUT /tasks/{id} - –æ–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–¥–∞—á—É —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º.
# ‚óã DELETE /tasks/{id} - —É–¥–∞–ª—è–µ—Ç –∑–∞–¥–∞—á—É —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º.
# üìå –î–ª—è –∫–∞–∂–¥–æ–π –∫–æ–Ω–µ—á–Ω–æ–π —Ç–æ—á–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–≤–æ–¥–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞ –∏
# –æ—Ç–≤–µ—Ç–∞. –î–ª—è —ç—Ç–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫—É Pydantic.

from fastapi import FastAPI,Request
from fastapi.templating import Jinja2Templates
from fastapi.responses import HTMLResponse
from .pydantic_models import Task


app = FastAPI()
templates = Jinja2Templates(directory = 'flask_dz/task5_8/templates')
tasks = []

@app.get("/", response_class=HTMLResponse)
async def index(request: Request):
    return templates.TemplateResponse(
        'tasks.html', {'request': request,'tasks': tasks})


@app.get('/tasks/{id}')
async def get_task(id: int):
    task = [task for task in tasks if task.id == id]
    return task

@app.post('/tasks/')
async def create_task(task: Task):
    tasks.append(task)
    return task

@app.put('/tasks/{task_id}')
async def update_task(task_id:int,new_task: Task):
    filtered_tasks = [task for task in tasks if task.id == task_id]
    if not filtered_tasks:
        return {'updated': False}
    task = filtered_tasks[0]

    task.name = new_task.title
    task.description = new_task.description
    task.status = new_task.status

    return{'updated': True, 'task': new_task}

@app.delete('/tasks/{task_id}/')
async def delete_task(task_id: int):
    filtered_tasks = [task for task in tasks if task.id == task_id]
    if not filtered_tasks:
        return {'deleted': False}
    task = filtered_tasks[0]
    tasks.remove(task)

    return {'deleted': True, 'task': task}
