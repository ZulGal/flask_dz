# –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –Ω–∞ Python, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å
# —Å—É–º–º—É —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–∞—Å—Å–∏–≤–∞ –∏–∑ 1000000 —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª.
# üêÄ –ü—Ä–∏–º–µ—Ä –º–∞—Å—Å–∏–≤–∞: arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, ...]
# üêÄ –ú–∞—Å—Å–∏–≤ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω —Å–ª—É—á–∞–π–Ω—ã–º–∏ —Ü–µ–ª—ã–º–∏ —á–∏—Å–ª–∞–º–∏
# –æ—Ç 1 –¥–æ 100.
# üêÄ –ü—Ä–∏ —Ä–µ—à–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç—å,
# –º–Ω–æ–≥–æ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–Ω–æ—Å—Ç—å –∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç—å.
# üêÄ –í –∫–∞–∂–¥–æ–º —Ä–µ—à–µ–Ω–∏–∏ –Ω—É–∂–Ω–æ –≤—ã–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
# –≤—ã—á–∏—Å–ª–µ–Ω–∏–π.
import multiprocessing
import time
import numpy as np


N = 1000000
arr = np.random.randint(0,10,N)

sum=0
def sequential(arr,calc,proc):
    global sum
    print(f"–ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ ‚Ññ {proc}")
    start = proc * calc
    stop = (proc + 1) * calc
    for i in range(start,stop):
        sum += arr[i]
    print(f"{stop} —Ü–∏–∫–ª–æ–≤ –≤—ã—á–∏—Å–ª–µ–Ω–∏–π –∑–∞–∫–æ–Ω—á–µ–Ω—ã, sum = {sum} –ü–æ—Ç–æ–∫ ‚Ññ {proc}")
    return sum

def processesed(procs, calc):
    # procs - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤
    # calc - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–µ—Ä–∞—Ü–∏–π –Ω–∞ –ø–æ—Ç–æ–∫

    processes = []

    # –¥–µ–ª–∏–º –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –Ω–∞ `theads` –ø–æ—Ç–æ–∫–æ–≤
    for proc in range(procs):
        p = multiprocessing.Process(target=sequential, args=(arr, calc, proc))
        processes.append(p)
        p.start()
    # –ü–æ–¥–æ–∂–¥–µ–º, –ø–æ–∫–∞ –≤—Å–µ –ø–æ—Ç–æ–∫–∏ –∑–∞–≤–µ—Ä—à–∞—Ç —Å–≤–æ—é —Ä–∞–±–æ—Ç—É.
    for p in processes:
        p.join()

if __name__=='__main__':
    start_time = time.time()
    # —É–∑–Ω–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —è–¥–µ—Ä —É –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
    n_proc = multiprocessing.cpu_count()
    # –≤—ã—á–∏—Å–ª—è–µ–º —Å–∫–æ–ª—å–∫–æ —Ü–∏–∫–ª–æ–≤ –≤—ã—á–∏—Å–ª–µ–Ω–∏–π –±—É–¥–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—Å—è
    # –Ω–∞ 1 —è–¥—Ä–æ, —á—Ç–æ –±—ã –≤ —Å—É–º–º–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å 80 –∏–ª–∏ —á—É—Ç—å –±–æ–ª—å—à–µ
    calc = 250000 // n_proc + 1
    processesed(n_proc, calc)

    print(f"–í—Å–µ–≥–æ {n_proc} —è–¥–µ—Ä –≤ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–µ")
    print(f"–ù–∞ –∫–∞–∂–¥–æ–º —è–¥—Ä–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–æ {calc} —Ü–∏–∫–ª–æ–≤ –≤—ã—á–∏—Å–ª–µ–Ω–∏–π")
    print(f"–ò—Ç–æ–≥–æ {n_proc * calc} —Ü–∏–∫–ª–æ–≤ –∑–∞: ", time.time() - start_time)